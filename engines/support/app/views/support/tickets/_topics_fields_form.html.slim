- topics_fields.each do |topics_field|
  - field = topics_field.field
  - field_id = topics_field.field_id.to_s
  -if topics_field.field.radio?
    - options = topics_field.field.field_options
    - if options.count > 3
      = ff.collection_select field_id, options, :id, :name, ff_options.merge(label: topics_field.field.name,
                               include_blank: true,
                               help: topics_field.field.hint)
    -else
      = ff.collection_radio_buttons field_id, options, :id, :name,ff_options.merge(label: topics_field.field.name,
                                      include_blank: true,
                                      help: topics_field.field.hint)
  -elsif topics_field.field.model_collection? && (model_field = Support::ModelField.all[topics_field.field.model_collection.to_sym])
     - if model_field.type_source(admin?)
       - source_path = instance_exec(current_user, &model_field.type_source(admin?))
       = ff.autocomplete_field field_id,ff_options.merge(label: topics_field.field.name,
                                         source:  source_path),ff_options.merge(include_blank: true) do |id|
        - model_field.model.find(id).send(model_field.human)

     - else
       = ff.collection_select field_id, model_field.type_query(admin?).call(current_user),
                                :id, model_field.human, {include_blank: true,
                                label: topics_field.field.name,
                                help: topics_field.field.hint}, ff_options
  - elsif field.check_box?
     = ff.collection_check_boxes field_id, field.field_options, :id, :name,
                                 ff_options.merge(label: field.name, help: field.hint)
  - elsif field.text?
     = ff.text_field field_id, ff_options.merge(label: field.name,
           required: topics_field.required,
           help: field.hint)
