<% @alpaca_raw_json.each do |key, value| %>
  var <%= key %> =  <%= raw value.to_json %>;
<% end %>

$.alpaca.Fields.AttributeField = $.alpaca.Fields.ObjectField.extend({
    getFieldType: function() {
        return "attribute";
    }
});
Alpaca.registerFieldClass("attribute", Alpaca.Fields.AttributeField);



var where_container;
var attributes_template = $('#attributes_template').html();

var aggregate = ['COUNT', 'SUM', 'MIN', 'MAX','AVG'];

function build_table(data, pages, page){
  var head = data[0];
  var data = data.splice(1,data.length - 1);
  var element = $('table#result');
  var string = '';
  string = string.concat('<tr>');
  $.each(head, function( index, value ) {
    string = string.concat(`<th> ${value} </th>\n`);
  });

  string = string.concat('</tr>');
  $.each(data, function( index, value ) {
    string = string.concat('<tr>');
    $.each(value, function( index, value ) {
      string = string.concat(`<td> ${value} </td>\n`);
    });
    string = string.concat('</tr>');

  });
  element.html(string);

  var twbs = $("#pagination");
  twbs.ruTwbsPagination({
    totalPages: pages,
    startPage: 1,
    onPageClick: function (event, page) {
        console.log(page);
          // pageClick(page);
    }
  });

}

build_table([['header'], ['data']]);




function checkbox_changed(e){
  if(this.parent.childrenByPropertyId.on || this.parent.childrenByPropertyId.class_name){
    var array = [this.parent.childrenByPropertyId.alias.getValue()];
  }else{
    var array = this.parent.path.split('/');
    array.splice(0,2);
  }



  // var value = e.target.attributes[2].nodeValue;
  var elem = $(e.target).select2('data')[0];
  var value = elem.id;
  // console.log(this);
  var label = elem.text;
  if(array.length > 0){
    label = array.join('.') + '.' + label;
  }
  if(array.length > 0){
    value = array.join('.') + '.' + value;
  }
  this.setValue('');
  this.refresh();
  var attributes_element = $("#main-form").alpaca('get').getControlByPath('attributes');

  attributes_element.resolveItemSchemaOptions(function(itemSchema, itemOptions, circular) {
      var insertionPoint = attributes_element.children.length;
      var itemData = Alpaca.createEmptyDataInstance(itemSchema);
      itemData.label = label;
      itemData.value = value;
      var copiedOptions = jQuery.extend(true,{}, itemOptions);
      attributes_element.addItem(insertionPoint, itemSchema, copiedOptions, itemData, function(item) {
        apply_select();
      });
  });
}

function new_association(e){
  // alert('FFFF');
  var self = this;
  var class_name = $("#main-form").alpaca('get')
                  .getControlByPath('class_name').getValue();
  var path = this.path.split('/');
  path[0] = class_name;
  path.splice(1, 1);
  path[path.length-1] = this.getValue();
  $.ajax({
    dataType: "json",
    url: "<%= class_info_constructor_index_path %>",
    success: function( json ) {
        self.assocs = {};
        self.assocs.enum = json.associations;
        self.assocs.optionLabels = json.associations_labels;
        self.assocs.attributes = json.attributes;
        self.assocs.labels = json.types;
        where_container.append(json.attributes, json.types, path);
        where_container.change();

    },
    async: false,
    data: {
      assocs: path
    }
  });
  if(self.parent.childrenByPropertyId[this.getValue()]){
    alert('<%=t(".selected")%>');
    return;
  }
  // console.log(self.assocs.attributes);
  // console.log(self.assocs.labels);

  var schema = {
    "title": this.getValue(),
    "type": "object",
    "properties":{
      "join_type":{
        "type": "string",
        "title": '<%= t(".join_type") %>',
        "enum": ['inner', 'left'],
        "required": true,
      },
      "all_attributes": {
        "title": '<%= t(".choose_attributes") %>',
        "enum": self.assocs.attributes
      },
      "list":{
        "title": '<%= t(".link") %>',
        "enum": self.assocs.enum,
      }
    }
  };
  var options = {
    "type": "object",
    "fields":{
      "join_type":{
        "optionLabels": ['<%= t(".inner_join") %>', '<%= t(".left_join") %>']
      },
      "all_attributes": {
        "type": "select",
        "optionLabels": self.assocs.labels,
        "onFieldChange": checkbox_changed
      },
      "list":{
        "type": "select",
        "optionLabels": self.assocs.optionLabels,
        "onFieldChange": new_association
      }
    }
  };

  var data = {
    "join_type": "inner"
  }

  this.parent.addItem(this.getValue(), schema, options,
  data, this.parent.children[self.parent.children.length -1].getId(), function(item) {
    var last_index = self.parent.children.length -1;
    // if(self.parent.children.length == 2){
      var last = self.parent.children[last_index].containerItemEl;
      var first = self.parent.children[last_index-1].containerItemEl;
      // first.after(last);
      self.setValue(null);
      self.refresh();
      apply_select();
      // $('<p>ddddddwadwadwadawdwad</p>').before(self.parent.children[0].containerItemEl);
      var button = $('<button> <%= t(".delete")%> </button>');
      var cur_elem = self.parent.children[self.parent.children.length -1];
      button.click(function(){
        // console.log(cur_elem.schema.title);
        // console.log()
        var array = cur_elem.path.split('/');
        array.splice(0,2);
        // console.log(array);
        var begin = array.join('.');
        // console.log(array);
        var attributes_element = $("#main-form").alpaca('get').getControlByPath('attributes');
        attributes_element.children = attributes_element.children.filter(word => !word.getValue().label.startsWith(begin));
        attributes_element.refresh();
        // for( var i in where_container.alpaca.children){
        //   console.log(where_container.alpaca.children[i].getValue());
        // }

        where_container.remove(begin);
        where_container.change();

        self.parent.removeItem(cur_elem.propertyId);
      });
        self.parent.children[self.parent.children.length -1].children[0].domEl.prepend(button);
  });



}


function new_join(elem){

  var schema = {
    // "title": this.getValue(),
    "type": "object",
    "properties":{
      "join_table":{
        "title": '<%= t(".join_table") %>',
        "enum": class_options,
        // "required": true
      },
      "alias":{
        "title": '<%= t(".alias") %>',
        "type": "string"
        // "enum": self.assocs.enum,
      },
      "join_type":{
        "type": "string",
        "title": '<%= t(".join_type") %>',
        "enum": ['inner', 'left'],
        "required": true,
      },
      "on":{
        "title": '<%= t(".on") %>',
        "type": "string"

      },
      "all_attributes": {
        "title": '<%= t(".choose_attributes") %>',
        // "enum": self.assocs.attributes
      }
    }
  };
  var options = {
    "type": "object",
    "fields":{
      "join_type":{
        "optionLabels": ['<%= t(".inner_join") %>', '<%= t(".left_join") %>']
      },
      "join_table":{
        "optionLabels": class_options,
        "onFieldChange": function(e){
          var self = this;
          $.getJSON( "<%= class_info_constructor_index_path %>", { assocs: [this.getValue()]} )
            .done(function( json ) {

              var par = self.parent;
              var prefix = 'c_'.concat(json.table_name);
              where_container.append(json.attributes, json.types, [0, prefix]);

              var al = par.childrenByPropertyId.all_attributes;
              al.schema.enum = json.attributes;
              al.options.optionLabels = json.types;
              // console.log(self.parent.childrenByPropertyId.alias.getValue());
              where_container.remove(self.parent.childrenByPropertyId.alias.getValue());

              par.childrenByPropertyId.alias.setValue(prefix);
              al.refresh();
              par.childrenByPropertyId.alias.refresh();
              apply_select();
              console.log(where_container.items);
            });

        }

      },
      "all_attributes": {
        "type": "select",
        // "optionLabels": self.assocs.labels,
        "onFieldChange": checkbox_changed
      },
      "alias":{
        "onFieldChange":function(e){
          // var input = this.containerItemEl.find('input');
          var old_value = this.old_value;
          var new_value = this.getValue();
          if(old_value && old_value != '')
            where_container.replace(old_value, this.getValue());
          // var attributes_element = $("#main-form").alpaca('get').getControlByPath('attributes');
          // attributes_element.children = attributes_element.children
          //   .filter(word => !word.getValue().label.startsWith(old_value.concat('.')));
          // attributes_element.refresh();

        },
        "events":{
          "focusin":function(){
            this.old_value = this.getValue();
          }
        }
      }
    }
  };

  var data = {
    "join_type": "inner"
  }
  var propertyId = "custom-join-" + new Date().getTime();

  elem.addItem(propertyId, schema, options,
  data, elem.children[elem.children.length -1].getId(), function(item) {
    apply_select();
    // console.log(elem.children[elem.children.length-1].childrenByPropertyId.on);
    // console.log(elem.children[elem.children.length-1].childrenByPropertyId);
    bind_autocomplete(elem.children[elem.children.length-1].childrenByPropertyId.on.containerItemEl);
    var button = $('<button> <%= t(".delete")%> </button>');
    var cur_elem = elem.children[elem.children.length -1];
    button.click(function(){
      // console.log(cur_elem.schema.title);
      // console.log()
      // var array = cur_elem.path.split('/');
      // array.splice(0,2);
      // console.log(array);
      console.log(cur_elem);
      var begin = cur_elem.childrenByPropertyId.alias.getValue();

      console.log(begin);
      // console.log(array);
      // var attributes_element = $("#main-form").alpaca('get').getControlByPath('attributes');
      // attributes_element.children = attributes_element.children.filter(word => !word.getValue().label.startsWith(begin));
      // attributes_element.refresh();
      // for( var i in where_container.alpaca.children){
      //   console.log(where_container.alpaca.children[i].getValue());
      // }

      where_container.remove(begin);
      where_container.change();
      elem.removeItem(cur_elem.propertyId);
      return false;
    });
      cur_elem.children[0].domEl.prepend(button);


  });


}

function bind_autocomplete(element) {
    function split( val ) {
      return val.split( /(,|\s|=|\(|\)|\+|\-|\/)+/ );
      // return val.split( /()\s)+/ );

    }
    function extractLast( term ) {
      return split( term ).pop();
    }

    (element.find('input, textarea'))
      // don't navigate away from the field on tab when selecting an item
      .on( "keydown", function( event ) {
        if ( event.keyCode === $.ui.keyCode.TAB &&
            $( this ).autocomplete( "instance" ).menu.active ) {
          event.preventDefault();
        }
      })
      .autocomplete({
        minLength: 0,
        source: function( request, response ) {
          // console.log(availableTags);
          // console.log(request.term);
          // delegate back to autocomplete, but extract the last term
          response( $.ui.autocomplete.filter(
             where_container.items.map(a => a.enum), extractLast( request.term ) ) );
        },
        focus: function() {
          // prevent value inserted on focus
          return false;
        },
        select: function( event, ui ) {
          var terms = split( this.value );
          // remove the current input
          terms.pop();
          // add the selected item
          terms.push( ui.item.value );
          // add placeholder to get the comma-and-space at the end
          terms.push( "" );
          // this.value = terms.join( ", " );
          this.value = terms.join("");

          return false;
        }
      });
  }



// Alpaca.registerView({
//     "id": "horizontal",
//     "parent": "web",
//     "horizontal": true // whether to render in horizontal mode
// });


$("#main-form").alpaca({
    "data": {
      "per": 20,
    },
    "schema": {
        "type": "object",
        "properties": {
              "class_name":{
                "title": '<%= t(".class_name") %>',
                "enum": class_options,
                "required": true
              },
              "alias":{
                "title": '<%= t(".alias") %>',
                "disabled": true
              },
              "all_attributes":{
                "title": '<%= t(".choose_attributes") %>'
              },
              // "where_list":{
              //   "title": '<%= t(".where_list") %>'
              // },
              "attributes":{
                "title": '<%= t(".attributes") %>',
                "required": true,
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "value":{
                      "hidden": true
                    },
                    "label":{
                      // "hidden": true
                    },
                    "aggregate":{
                      "enum": aggregate
                    },
                    "order":{
                      "type": "array",
                      "enum": ["ASC", "DESC", "GROUP"],
                      // "title": '<%= t(".associations") %>',
                    },

                  }
                }

              },
              "association":{
                "type": "object",
                "properties":{
                  "list":{
                    "title": '<%= t(".link") %>',
                    // "enum": class_options,
                    // "required": true
                  }
                }
              },
              "having":{
                "title": '<%= t(".having") %>',
                "type": "string"
              },
              "where":{
                "title": '<%= t(".where") %>',
                "type": "string"
              },
              "per":{
                "title": '<%= t(".per") %>',
                "type": "number"
              }



        }
    },
    "options":{
      "focus":"",
      "hideInitValidationError":true,
      "fields":{
            "class_name":{
              "type": "select",
              "optionLabels": class_labels,
              "onFieldChange": function(e) {
                var self = this;
                $.getJSON( "<%= class_info_constructor_index_path %>", { assocs: [this.getValue()]} )
                  .done(function( json ) {
                    var al = $("#main-form").alpaca('get').getControlByPath('all_attributes');

                    al.schema.enum = json.attributes;
                    al.options.optionLabels = json.types;
                    where_container.assign(json.attributes, json.types, json.table_name);
                    where_container.change();
                    al.refresh();
                    self.parent.childrenByPropertyId.alias.setValue(json.table_name);
                    var attributes_elem = $("#main-form").alpaca('get').getControlByPath('attributes');
                    if(attributes_elem.children.length > 0){
                      attributes_elem.children.splice(0,attributes_elem.children.length);
                    }
                    attributes_elem.refresh();
                    var al = $("#main-form").alpaca('get').getControlByPath('association');
                    var schema = {
                      "type": "object"
                    };
                    var options = {
                      "type": "object"
                    }
                    al.children[0].schema.enum = json.associations;
                    al.children[0].options.optionLabels = json.associations_labels;
                    while(al.children.length > 1){
                      al.removeItem(al.children[1].propertyId);
                    }

                    al.children[0].setValue('');
                    al.children[0].refresh();
                    apply_select();
                    // al.addItem(self.getValue(), schema, options, null, al.children[0].getId(), function(item) {
                    //   apply_select();
                    //   var last = al.children[al.children.length-1].containerItemEl;
                    //   var first = al.children[al.children.length - 2].containerItemEl;
                    //   first.after(last);
                    // });
                  });
              }
            },
            "alias":{
              "disabled": true,
            },
            "all_attributes":{
              "type": "select",
              "onFieldChange": checkbox_changed
            },
            "attributes":{
              "type": "array",
              "toolbar":{
                "actions":[{
                  "action": "add",
                  "enabled": false,
                  "click": function(){
                    this.handleToolBarAddItemClick(function(item) {
                      // load_data_for_select( item.children[0], true);
                        //
                        // item.children[0].getControlEl().trigger('change');
                    });

                  }
                }]
              },
              "actionbar": {
                "actions": [{
                              "action": "add",
                              "enabled": false
                            }
                ]
              },
              "items": {
                "type": "attribute",
                "fields":{
                  "aggregate":{
                    "type": "select"
                  },
                  "order": {
                    "type": "checkbox"
                 },
                 "label":{
                   "disabled": true
                 }
                }
              }
            },
            "association":{
              "type": "object",
              "fields":{
                "list":{
                  "type": "select",
                  "onFieldChange": new_association
                }
              }
            },
            "having":{
              "type": "textarea"
            },
            "where":{
              "type": "textarea"
            }

      },
      "form": {
            "attributes": {
                "method": "post",
                "action": "<%=csv_constructor_index_path%>"
            },
            "buttons": {
                "submit": {
                    "title": '<%= t(".csv") %>',
                    "click": function(e) {
                      $.ajax({
                        type: 'POST',
                        url: "<%=csv_constructor_index_path%>",
                        data: this.getValue(),
                      }).done(function(arg) {

                        let csvContent = "data:text/csv;charset=utf-8,"
                            + arg.data;
                        var encodedUri = encodeURI(csvContent);
                        var link = document.createElement("a");
                        link.setAttribute("href", encodedUri);
                        link.setAttribute("download", "results.csv");
                        document.body.appendChild(link); // Required for FF
                        link.click();
                      });
                    }
                },
                "array": {
                    "title": '<%= t(".array") %>',
                    "click": function(e) {
                      $.ajax({
                        type: 'POST',
                        dataType: 'json',
                        url: "<%=array_constructor_index_path%>",
                        data: this.getValue(),
                      }).done(function(arg) {
                        build_table(arg.data, arg.pages, arg.page);
                      });


                    }
                }

        }
    },
    "view": {
        "layout": {
            "template": "<%=j render partial: 'form_layout' %>",
            "bindings": {
                "class_name": "column-1",
                "all_attributes": "column-1",
                "association": "column-1",
                "alias": "column-1",
                "attributes" : "column-2",
                "having": "column-2",
                "where": "column-2",
                "per": "column-2"

            }
        },
        "templates": {
            "container-attribute": attributes_template,
            // "control-checkbox": $('#checkbox_template').html()
        },
        // "horizontal": true,
        "callbacks": {
            // "control": function() {
            //   console.log('fff');
            //   console.log(this);
            //     console.log(this.getValue());
            //     console.log('aa');
            //     console.log(this.getControlEl().css("display"));
            //     console.log(this.getControlEl());
            //     // this.getControlEl().css("float", "left");
            // }
        }

    }

  },
  "postRender": function(control) {
    apply_select();
    var attributes = $("#main-form").alpaca('get').getControlByPath('attributes');
    attributes.old_refresh = attributes.refresh;

    attributes.refresh = function(callback){
      var self = this;
      var new_callback = function(callback){
        if(callback)
          callback.call(self);
        apply_select();
        // self.containeritemel.find('.alpaca-control.checkbox').css("float","left");
        // self.containerItemEl.find('.alpaca-control.checkbox').css("margin-top","0px");
        // self.children[3].containerItemEl.find('.alpaca-control').css("margin-top","0px");
      };
      self.old_refresh(new_callback);
  }

  init_where();
  // where_container.init();
  $("#main-form").alpaca('get').getControlByPath('class_name').setValue('Core::Cluster');
  $("#main-form").alpaca('get').getControlByPath('class_name').getControlEl().trigger('change');



  var button = $('<button> <%= t(".add_join")%> </button>');
  button.click(function(){
    new_join($("#main-form").alpaca('get').getControlByPath('association'));
    return false;
  });

  $("#main-form").alpaca('get').getControlByPath('association').domEl.find('div.alpaca-container').prepend(button);
  // setTimeout(2000);
  // button.trigger('click');
  // $("#main-form").alpaca('get').getControlByPath('class_name').getControlEl().trigger('change');


  // $("#main-form").alpaca('get').getControlByPath('class_name').setValue('Core::Cluster');
  // $("#main-form").alpaca('get').getControlByPath('class_name').getControlEl().trigger('change');
  //
  // console.log(Alpaca.views);
  // console.log($("#main-form").alpaca('get').getControlByPath('all_attributes').view);
  // $("#main-form").alpaca('get').getControlByPath('all_attributes').view = Alpaca.views['my-view'];
  // console.log($("#main-form").alpaca('get').getControlByPath('all_attributes').view);

  // $("#main-form").alpaca('get').getControlByPath('all_attributes').setValue('admin_login');
  // $("#main-form").alpaca('get').getControlByPath('all_attributes').getControlEl().trigger('change');
  bind_autocomplete($("#main-form").alpaca('get').getControlByPath('where').containerItemEl);
  bind_autocomplete($("#main-form").alpaca('get').getControlByPath('having').containerItemEl);


}});
