<% @alpaca_raw_json.each do |key, value| %>
  var <%= key %> =  <%= raw value.to_json %>;
<% end %>

$.alpaca.Fields.AttributeField = $.alpaca.Fields.ObjectField.extend({
    getFieldType: function() {
        return "attribute";
    }
});
Alpaca.registerFieldClass("attribute", Alpaca.Fields.AttributeField);



var all_attributes;

//

var attributes_template = $('#attributes_template').html();

// var attributes_template =`<script type="text/x-handlebars-template">
//
//     <div>
//       {{#with items.[0]}}
//
//           {{#item}}{{/item}}
//
//       {{/with}}
//
//       <div class='row'>
//         <div class='col-xs-6'>
//           {{#with items.[1]}}
//
//               {{#item}}{{/item}}
//
//           {{/with}}
//         </div>
//
//         <div class='col-xs-6'>
//           {{#with items.[2]}}
//
//               {{#item}}{{/item}}
//
//           {{/with}}
//         </div>
//
//       </div>
//
//
//
//       {{#with items.[3]}}
//
//           {{#item}}{{/item}}
//
//       {{/with}}
//
//
//
//     </div>
// </` + `script>`;



console.log(attributes_template);




var aggregate = ['COUNT', 'SUM', 'MIN', 'MAX','AVG'];

function init_where(){
  all_attributes = {
    items: [],
    alpaca: $("#main-form").alpaca('get').getControlByPath('where'),
    append: function(enums, labels){
     for(var i in enums){
       this.items.push({
         enum: enums[i],
         label: labels[i],
         type: labels[i].split('|').slice(-1)[0]
       });
     }
     // this.alpaca.addItem(propertyId, itemSchema, itemOptions, itemData, insertAfterId, callback){
     //
     // }
    },
    remove: function(begin){
    },
    init: function(){
      var self = this;
      var propertyId = "field-" + new Date().getTime();
      var button = $('<button> <%= t(".add_where")%> </button>');
      button.click(function(){
        var itemData = {

        };
        var itemSchema = {
          "type": "object",
          "properties":{
            "all_attributes":{
              "type": "select",
              // "enum": self.items.map(a => a.enum)
            },
            "attribute_type":{
              "hidden": true
            }
          }
        };
        var itemOptions = {
          "type": "object",
          "fields":{
            "all_attributes":{
              "type": "select",
              // "optionLabels": self.items.map(a => a.label),
              "onFieldChange": function(){
                var value  = this.domEl.find('select').select2('val');
                var obj = self.items.find(function(element){
                  return element.enum == value;
                });
                this.parent.childrenByPropertyId['attribute_type'].setValue(obj.type);

                var my_ops_key = Object.keys(ops).find(function(element){
                  return element.includes(obj.type);
                });
                var my_ops = ops[my_ops_key];
                enums = []
                for(var i in my_ops){
                  Object.keys(my_ops).forEach(function(key){
                    enums = enums.concat(my_ops[key]);
                  });
                }

                var schema = {
                  "type": "select",
                  "title": '<%= t("select_operation") %>',
                  "enum" : enums
                };

                var options = {
                  "type": "select",
                  "onFieldChange": function(){
                    // var value  = this.domEl.find('select').select2('val');
                    var value  = this.data[0].text;
                    var type;
                    for(var i in my_ops){
                      console.log(my_ops[i]);
                      if(my_ops[i].includes(value)){
                        type = i;
                        break;
                      }
                    }
                    if(i == 'binary_operators')
                    {



                      var insertAfterId = this.parent.childrenByPropertyId.operation.getId();
                      this.parent.addItem('second_operand',schema,options, null, insertAfterId, function(){
                        apply_select();
                      });
                    }

                  }
                };
                var insertAfterId = this.parent.childrenByPropertyId.attribute_type.getId();

                this.parent.addItem('operation',schema,options, null, insertAfterId, function(){
                  apply_select();
                });
              }
            }
          }
        };
        var insertAfterId = null;//all_attributes.alpaca.children.slice(-1)[0].getId();

        self.alpaca.addItem(propertyId, itemSchema, itemOptions, itemData, insertAfterId, null);
        apply_select();

      });
      // if(self.parent.parent.path == "/")
      self.alpaca.domEl.find('div.alpaca-container').prepend(button);
      button.trigger('click');
    },
    change: function(){
      var self = this;
      for(var i in self.alpaca.children){
        for(var j in self.alpaca.children[i].children){
          var al = self.alpaca.children[i].children[j];
          if(al.propertyId == 'all_attributes'){
            al.schema.enum = self.items.map(a => a.enum);
            al.options.optionLabels = self.items.map(a => a.label);
            al.refresh();
          }

        }
      }
    }
  }
}

function checkbox_changed(e){
  var array = this.parent.path.split('/');
  array.splice(0,2);

  // var value = e.target.attributes[2].nodeValue;
  var elem = $(e.target).select2('data')[0];
  var value = elem.id;
  // console.log(this);
  var label = elem.text;
  if(array.length > 0){
    label = array.join('.') + '.' + label;
  }
  if(array.length > 0){
    value = array.join('.') + '.' + value;
  }
  this.setValue('');
  this.refresh();
  // console.log(this.getValue());

  var attributes_element = $("#main-form").alpaca('get').getControlByPath('attributes');

  attributes_element.resolveItemSchemaOptions(function(itemSchema, itemOptions, circular) {
      var insertionPoint = attributes_element.children.length;
      var itemData = Alpaca.createEmptyDataInstance(itemSchema);
      itemData.label = label;
      itemData.value = value;
      var copiedOptions = jQuery.extend(true,{}, itemOptions);
      // console.log(copiedOptions.fields.order);
      // copiedOptions.fields.order.view.horizontal = true;

      // copiedOptions.fields.order.label = label;
      // copiedOptions.fields.order.label = label;
      // copiedOptions.fields.order.value = value;

      attributes_element.addItem(insertionPoint, itemSchema, copiedOptions, itemData, function(item) {
        // console.log(item.childrenByPropertyId.order);
        // console.log(item);
        // console.log(item.children[2]);

          // console.log(item.children[2]);//
        // console.log(item.children[2].domEl.find('.alpaca-control').length);
        // console.log(item.children);

        // item.children[3].containerItemEl.find('.alpaca-control').css("float","left");
        // item.children[3].containerItemEl.find('.alpaca-control').css("margin-top","0px");
        apply_select();
        // $(e.target).val('sss');
        // console.log(item);
        // console.log(item.children[2]);
        // console.log('aa');
        // console.log(item.domEl.css("display"));
        // console.log(item.domEl.css());
        // console.log(item);
        // console.log(item);
        // console.log(item.children[2]);
        // console.log(item.children[2].containerItemEl);
        // console.log(item.children[2].containerItemEl.find(".form-group").length);
        // item.children[3].containerItemEl.find(".form-group").css("display", "inline-block");

        // item.refresh();
      });
  });
}

function new_association(e){
  // console.log('wwww');
  var self = this;
  var class_name = $("#main-form").alpaca('get')
                  .getControlByPath('class_name').getValue();
  var path = this.path.split('/');
  path[0] = class_name;
  path.splice(1, 1);
  path[path.length-1] = this.getValue();
  // console.log(self);
  // console.log(self.parent.children.length);
  // console.log(self.parent.parent.children.length);
  // console.log(self.parent.childrenByPropertyId.keys);
  // if(self.parent.children.length == 1)
    $.ajax({
      dataType: "json",
      url: "<%= class_info_constructor_index_path %>",
      success: function( json ) {
          self.assocs = {};
          self.assocs.enum = json.associations;
          self.assocs.optionLabels = json.associations_labels;
          self.assocs.attributes = json.attributes;
          self.assocs.labels = json.types;
          all_attributes.append(json.attributes, json.types);
          console.log(all_attributes);

      },
      async: false,
      data: {
        assocs: path
      }
    });
  if(self.parent.childrenByPropertyId[this.getValue()]){
    alert('<%=t(".selected")%>');
    return;
  }
  // console.log(self);
  // var index = this.schema.enum.indexOf(this.getValue());
  // if children
  // this.schema.enum.splice(index,1);
  // this.options.optionLabels.splice(index,1);
  var schema = {
    "title": this.getValue(),
    "type": "object",
    "properties":{
      "join_type":{
        "type": "string",
        "title": '<%= t(".join_type") %>',
        "enum": ['inner', 'left'],
        "required": true,
      },
      "all_attributes": {
        "title": '<%= t(".choose_attributes") %>',
        "enum": self.assocs.attributes
      },
      // "where_list": {
      //   "title": '<%= t(".where_list") %>',
      //   "enum": self.assocs.attributes
      // },
      "list":{
        "title": '<%= t(".link") %>',
        "enum": self.assocs.enum,
        // "required": true
      }
    }
  };
  var options = {
    "type": "object",
    "fields":{
      "join_type":{
        "optionLabels": ['<%= t(".inner_join") %>', '<%= t(".left_join") %>']
      },
      "all_attributes": {
        "type": "select",
        "optionLabels": self.assocs.labels,
        "onFieldChange": checkbox_changed
      },
      "list":{
        "type": "select",
        "optionLabels": self.assocs.optionLabels,
        "onFieldChange": new_association
      }
    }
  };

  var data = {
    "join_type": "inner"
  }

  this.parent.addItem(this.getValue(), schema, options,
  data, this.parent.children[self.parent.children.length -1].getId(), function(item) {
    var last_index = self.parent.children.length -1;
    // if(self.parent.children.length == 2){
      var last = self.parent.children[last_index].containerItemEl;
      var first = self.parent.children[last_index-1].containerItemEl;
      // first.after(last);
      self.setValue(null);
      self.refresh();
      apply_select();
      // $('<p>ddddddwadwadwadawdwad</p>').before(self.parent.children[0].containerItemEl);
      var button = $('<button> <%= t(".delete")%> </button>');
      var cur_elem = self.parent.children[self.parent.children.length -1];
      button.click(function(){
        // console.log(cur_elem.schema.title);
        // console.log()
        var array = cur_elem.path.split('/');
        array.splice(0,2);
        // console.log(array);
        var begin = array.join('.');
        // console.log(array);
        var attributes_element = $("#main-form").alpaca('get').getControlByPath('attributes');
        attributes_element.children = attributes_element.children.filter(word => !word.getValue().label.startsWith(begin));
        attributes_element.refresh();

        // for(var i in attributes_element.children){
        //   var el = attributes_element.children[i];
        //   var value = el.getValue().label;
        //   console.log(value);
        //   console.log(begin);
        //   console.log(value.startsWith(begin));
        // }
        self.parent.removeItem(cur_elem.propertyId);
      });
      // if(self.parent.parent.path == "/")
        self.parent.children[self.parent.children.length -1].children[0].domEl.prepend(button);
      // var last.

    // }
  });



}


// Alpaca.registerView({
//     "id": "horizontal",
//     "parent": "web",
//     "horizontal": true // whether to render in horizontal mode
// });


$("#main-form").alpaca({
    "data": {
    },
    "schema": {
        "type": "object",
        "properties": {
              "class_name":{
                "title": '<%= t(".class_name") %>',
                "enum": class_options,
                "required": true
              },
              "all_attributes":{
                "title": '<%= t(".choose_attributes") %>'
              },
              // "where_list":{
              //   "title": '<%= t(".where_list") %>'
              // },
              "attributes":{
                "title": '<%= t(".attributes") %>',
                "required": true,
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "value":{
                      "hidden": true
                    },
                    "label":{
                      // "hidden": true
                    },
                    "aggregate":{
                      "enum": aggregate
                    },
                    "order":{
                      "enum": ["ASC", "DESC", "GROUP"]
                      // "title": '<%= t(".associations") %>',
                      // "required": true
                    },

                  }
                }

              },
              "association":{
                "type": "object",
                "properties":{
                  "list":{
                    "title": '<%= t(".link") %>',
                    // "enum": class_options,
                    // "required": true
                  }
                }
              },
              "where":{
                "title": '<%= t(".where") %>',
                "type": "object"
              }


        }
    },
    "options":{
      "focus":"",
      "hideInitValidationError":true,
      "fields":{
            "class_name":{
              "type": "select",
              "optionLabels": class_labels,
              "onFieldChange": function(e) {
                var self = this;
                $.getJSON( "<%= class_info_constructor_index_path %>", { assocs: [this.getValue()]} )
                  .done(function( json ) {
                    var al = $("#main-form").alpaca('get').getControlByPath('all_attributes');

                    al.schema.enum = json.attributes;
                    al.options.optionLabels = json.types;
                    all_attributes.append(json.attributes, json.types);
                    all_attributes.change();
                    al.refresh();

                    // var al = $("#main-form").alpaca('get').getControlByPath('where_list');
                    // al.schema.enum = json.attributes;
                    // al.options.optionLabels = json.types;
                    // al.refresh();

                    var attributes_elem = $("#main-form").alpaca('get').getControlByPath('attributes');
                    // console.log(association_elem.children);
                    if(attributes_elem.children.length > 0){
                      attributes_elem.children.splice(0,attributes_elem.children.length);
                    }
                    attributes_elem.refresh();

                    var al = $("#main-form").alpaca('get').getControlByPath('association');
                    var schema = {
                      "type": "object"
                    };
                    var options = {
                      "type": "object"
                    }
                    al.children[0].schema.enum = json.associations;
                    al.children[0].options.optionLabels = json.associations_labels;
                    while(al.children.length > 1){
                      al.removeItem(al.children[1].propertyId);
                    }

                    al.children[0].setValue('');
                    al.children[0].refresh();
                    apply_select();
                    // al.addItem(self.getValue(), schema, options, null, al.children[0].getId(), function(item) {
                    //   apply_select();
                    //   var last = al.children[al.children.length-1].containerItemEl;
                    //   var first = al.children[al.children.length - 2].containerItemEl;
                    //   first.after(last);
                    // });
                  });
              }
            },
            "all_attributes":{
              "type": "select",
              "onFieldChange": checkbox_changed
            },
            "attributes":{
              "type": "array",
              "toolbar":{
                "actions":[{
                  "action": "add",
                  "enabled": false,
                  "click": function(){
                    this.handleToolBarAddItemClick(function(item) {
                      // load_data_for_select( item.children[0], true);
                        //
                        // item.children[0].getControlEl().trigger('change');
                    });

                  }
                }]
              },
              "actionbar": {
                "actions": [{
                              "action": "add",
                              "enabled": false
                            }
                ]
              },
              "items": {
                "type": "attribute",
                "fields":{
                  "aggregate":{
                    "type": "select"
                  },
                  "order": {
                    "type": "checkbox",
                    "view": {
                      "layout": "horizontal"
                    }
                   // "type": "select",
                   // "onFieldChange": function(e) {
                   //  load_data_for_select(this, false);
                   //
                   // }
                 },
                 "label":{
                   "disabled": true
                 }
                }
              }
            },
            "association":{
              "type": "object",
              "fields":{
                "list":{
                  "type": "select",
                  "onFieldChange": new_association
                }
              }
            },
            "where":{
              "type": "object"
            }

      },
      "form": {
            "attributes": {
                "method": "post",
                "action": "<%=csv_constructor_index_path%>"
            },
            "buttons": {
                "submit": {
                    "title": '<%= t(".csv") %>',
                    "click": function(e) {
                      // console.log(this.getValue());
                      // console.log(this);

                      var params = this.getValue();
                      var associations = {};
                      var path = [];
                      // var func = function(elem,path){
                      //   for (var key in params.association) {
                      //       if (params.association.hasOwnProperty(key)) {
                      //           console.log(key + " -> " + params.association[key]);
                      //       }
                      //   }
                      // }
                      //
                      // while(){
                      //
                      // }

                      // for (var i in this.association.children){
                      //   if
                      // }
                      // console.log(this.children);
                      var association_elem =  $("#main-form")
                                .alpaca('get').getControlByPath('association');
                      // console.log(association_elem.children[1].children[0]);
                      // console.log(association_elem.children[1].children[0].schema.enum);
                      //
                      // console.log(association_elem.children[1].children[0].getValue());

                      // console.log(association_elem);
                      // var func = function(elem){
                      //   for(var i in elem.children){
                      //
                      //   }
                      // }
                      // console.log($("#main-form").alpaca('get').getControlByPath('association').getValue());
                      // params.association = "projects";
                      var ajax_params = {"data": params};
                      // console.log(ajax_params);
                      // console.log(ajax_params.data);
                      var promise = this.ajaxSubmit();
                      promise.done(function() {
                        // messagesContainer.html('<div class="alert alert-success" id="success_div"></div>');
                        // messagesContainer.find("#success_div").text(successMessage);
                        // var updatedText = form.getControlByPath('comment/text').getValue();
                        // var context_id = form.getControlByPath('comment/context_id').getValue();
                        // form.domEl.parents("article").attr('context-id',context_id);
                        // alpacaContainer.html(`<p>${updatedText}</p>`);
                      });
                      promise.fail(function(arg) {
                        // messagesContainer.html('<div class="alert alert-danger" id="errors_div"></div>');
                        // messagesContainer.find("#errors_div").text(errorsMessage);
                      });
                    }
                }
        }
    },
    "view": {
        "layout": {
            "template": "<%=j render partial: 'form_layout' %>",
            "bindings": {
                "class_name": "column-1",
                "all_attributes": "column-1",
                "association": "column-1",
                // "where_list": "column-1",
                "attributes" : "column-2",
                "where": "column-2"
            }
        },
        "templates": {
            "container-attribute": attributes_template,
            // "control-checkbox": $('#checkbox_template').html()
        },
        // "horizontal": true,
        "callbacks": {
            // "control": function() {
            //   console.log('fff');
            //   console.log(this);
            //     console.log(this.getValue());
            //     console.log('aa');
            //     console.log(this.getControlEl().css("display"));
            //     console.log(this.getControlEl());
            //     // this.getControlEl().css("float", "left");
            // }
        }

    }

  },
  "postRender": function(control) {
    apply_select();
    var attributes = $("#main-form").alpaca('get').getControlByPath('attributes');
    attributes.old_refresh = attributes.refresh;

    attributes.refresh = function(callback){
      var self = this;
      var new_callback = function(callback){
        if(callback)
          callback.call(self);
        apply_select();
        // self.containeritemel.find('.alpaca-control.checkbox').css("float","left");
        // self.containerItemEl.find('.alpaca-control.checkbox').css("margin-top","0px");
        // self.children[3].containerItemEl.find('.alpaca-control').css("margin-top","0px");
      };
      self.old_refresh(new_callback);
  }
  init_where();
  all_attributes.init();
  $("#main-form").alpaca('get').getControlByPath('class_name').setValue('Core::Cluster');
  $("#main-form").alpaca('get').getControlByPath('class_name').getControlEl().trigger('change');

  console.log(Alpaca.views);
  console.log($("#main-form").alpaca('get').getControlByPath('all_attributes').view);
  // $("#main-form").alpaca('get').getControlByPath('all_attributes').view = Alpaca.views['my-view'];
  console.log($("#main-form").alpaca('get').getControlByPath('all_attributes').view);

  // $("#main-form").alpaca('get').getControlByPath('all_attributes').setValue('admin_login');
  // $("#main-form").alpaca('get').getControlByPath('all_attributes').getControlEl().trigger('change');


}});
