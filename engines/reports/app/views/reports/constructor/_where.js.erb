function init_where(){
  where_container = {
    items: [],
    alpaca: $("#main-form").alpaca('get').getControlByPath('where'),
    assign: function(enums,labels){
      this.items = [];
      for(var i in enums){
        this.items[i] = {
          enum: enums[i],
          label:labels[i],
          type: labels[i].split('|').slice(-1)[0]
        };
      }
    },
    append: function(enums, labels, prefix_array = []){
     var prefix = prefix_array.splice(1, prefix_array.length -1 ).join('.');
     if(prefix != ''){
       prefix = prefix.concat('.');
     }
     for(var i in enums){
       this.items.push({
         enum: prefix.concat(enums[i]),
         label: prefix.concat(labels[i]),
         type: labels[i].split('|').slice(-1)[0]
       });
     }
     // console.log(this.items);

     // this.alpaca.addItem(propertyId, itemSchema, itemOptions, itemData, insertAfterId, callback){
     //
     // }
    },
    get_items: function(){
      return this.items;
    },
    remove: function(begin){
      // for(var i in this.alpaca.children){
      //   var elem = this.alpaca.children[i];
      //   console.log(elem.getValue());
      // }

      this.alpaca.children = this.alpaca.children.filter(word => (word.getValue() == {} ||
        (word.getValue().all_attributes && !word.getValue().all_attributes.startsWith(begin))));
      this.alpaca.refresh();
      this.init();
      // console.log(this.alpaca.children);
      // this.change();
      // self.alpaca.domEl.find('div.alpaca-container').prepend(button);

      // this.alpaca.refresh();
      // for(var i in this.alpaca.children){
      //   var elem = this.alpaca.children[i];
      //   elem.refresh();
      //   // console.log(elem.getValue());
      // }

      // for(var i in this.alpaca.children){
      //   var elem = this.alpaca.children[i];
      //   elem.childrenByPropertyId('all_children')
      //   for(var j in this.alpaca.children){
      //
      //   }
      //
      // }
      // this.change();
    },
    init: function(){
      var self = this;
      var propertyId = "field-" + new Date().getTime();
      self.alpaca.addItem('propertyId', {}, {hidden:true },{}, null);

      var button = $('<button> <%= t(".add_where")%> </button>');
      // console.log(this.items);

      button.click(function(e){
        // console.log(self.items);
        // console.log(self.get_items());

        // e.preventDefault();
        var itemData = {

        };
        var itemSchema = {
          "type": "object",
          "properties":{
            "all_attributes":{
              "type": "select",
              // "enum": self.items.map(a => a.enum)
            },
            "attribute_type":{
              "hidden": true
            }
          }
        };
        var itemOptions = {
          "type": "object",
          "fields":{
            "all_attributes":{
              "type": "select",
              // "optionLabels": self.items.map(a => a.label),
              "onFieldChange": function(){
                // var value  = this.domEl.find('select').select2('val');
                var value  = this.getValue();
                var obj = self.items.find(function(element){
                  return element.enum == value;
                });
                this.parent.childrenByPropertyId['attribute_type'].setValue(obj.type);
                var my_ops_key = Object.keys(ops).find(function(element){
                  return element.includes(obj.type);
                });
                var my_ops = ops[my_ops_key];
                enums = []
                Object.keys(my_ops).forEach(function(key){

                  enums = enums.concat(my_ops[key]);
                });
                self.removeField(this.parent.childrenByPropertyId.operation);
                self.removeField(this.parent.childrenByPropertyId.second_operand);


                var schema = {
                  "type": "select",
                  "title": '<%= t("select_operation") %>',
                  "enum" : enums
                };

                var options = {
                  "type": "select",
                  "onFieldChange": function(){
                    var value  = this.getValue();
                    var type;
                    for(var i in my_ops){
                      // console.log(my_ops[i]);
                      if(my_ops[i].includes(value)){
                        type = i;
                        break;
                      }
                    }
                    self.removeField(this.parent.childrenByPropertyId.second_operand);

                    // if operator is binary, we will add
                    if(i == 'binary_operators')
                    {
                      var insertAfterId = this.parent.childrenByPropertyId.operation.getId();
                      var config = self.second_operand_field();
                      this.parent.addItem('second_operand',config.schema, config.options, null, insertAfterId, function(){
                        apply_select();
                      });
                    }

                  }
                };
                var insertAfterId = this.parent.childrenByPropertyId.attribute_type.getId();
                this.parent.addItem('operation',schema,options, null, insertAfterId, function(){
                  apply_select();
                });
              }
            }
          }
        };
        var insertAfterId = null;
        if(self.alpaca.children.length){
          insertAfterId = self.alpaca.children[self.alpaca.children.length-1].getId();//all_attributes.alpaca.children.slice(-1)[0].getId();
        }
        console.log(insertAfterId);

        self.alpaca.addItem(propertyId, itemSchema, itemOptions, itemData, insertAfterId, function(){
          self.change();
          apply_select();
        });
        return false;
      });
      // if(self.parent.parent.path == "/")
      self.alpaca.domEl.find('div.alpaca-container').prepend(button);
      // button.trigger('click');
    },
    change: function(){
      var self = this;
      for(var i in self.alpaca.children){
        for(var j in self.alpaca.children[i].children){
          var al = self.alpaca.children[i].children[j];
          if(al.propertyId == 'all_attributes'){
            al.schema.enum = self.items.map(a => a.enum);
            al.options.optionLabels = self.items.map(a => a.label);
            al.refresh();
          }

        }
      }
    },
    removeField: function(element){
      if(element){
        element.parent.removeItem(element.propertyId);
      }
    },
    second_operand_field: function(){
    var self = this;
    return {
    "schema": {
        "type": "object",
        "properties": {
            "choice": {
                "title": '<%=t(".choose_comparation")%>',
                "type": "string",
                "enum": ["attribute", "expression"],
                "required": true
            },
            "attribute": {
                // "title": "Pick a Flavour",
                "type": "string",
                "enum": self.items.map(a => a.enum)
            },
            "expression": {
                // "title": "Pick a Topping",
                "type": "string",
                // "enum": ["Marshmellow", "Chocolate Chip", "Caramel", "Cookie Dough"]
            }
        },
        "dependencies": {
            "attribute": ["choice"],
            "expression": ["choice"]
        }
    },
    "options": {
        "fields": {
            "attribute": {
                "optionLabels": self.items.map(a => a.label),
                "dependencies": {
                    "choice": "attribute"
                }
            },
            "expression": {
                "dependencies": {
                    "choice": "expression"
                }
            }
        }
    }
  }

    }
  }
}
